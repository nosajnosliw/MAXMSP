max v2;#N vpatcher 161 44 789 427;#P origin 0 -13;#P window setfont "Sans Serif" 9.;#P window linecount 1;#P hidden newex 238 33 106 196617 bgcolor 200 210 110;#P message 41 200 30 196617 read;#P window linecount 2;#P comment 273 178 101 196617 Trigger to apply operation in place;#P button 256 184 15 0;#P window linecount 1;#P message 256 204 38 196617 output;#P flonum 125 275 35 9 0 0 0 3 0 0 0 221 221 221 222 222 222 0 0 0;#P user ubumenu 27 265 56 196617 0 1 1 0;#X add pass;#X add *;#X add /;#X add +;#X add -;#X add +m;#X add -m;#X add %;#X add min;#X add max;#X add abs;#X add avg;#X add absdiff;#X add wrap;#X add fold;#X add !pass;#X add !/;#X add !-;#X add !%;#X add &;#X add |;#X add ^;#X add ~;#X add >>;#X add <<;#X add &&;#X add ||;#X add !;#X add >;#X add <;#X add >=;#X add <=;#X add ==;#X add !=;#X add >p;#X add <p;#X add >=p;#X add <=p;#X add ==p;#X add !=p;#X add sin;#X add cos;#X add tan;#X add asin;#X add acos;#X add atan;#X add atan2;#X add sinh;#X add cosh;#X add tanh;#X add asinh;#X add acosh;#X add atanh;#X add exp;#X add exp2;#X add ln;#X add log2;#X add log10;#X add hypot;#X add pow;#X add sqrt;#X add ceil;#X add floor;#X add round;#X add trunc;#X add ignore;#X prefix_set 0 0 <none> 0;#P newex 50 283 61 196617 prepend op;#P newex 10 305 125 196617 jit.op;#P newex 515 161 62 196617 prepend set;#P user ubumenu 494 138 53 196617 0 1 1 0;#X add mixer1;#X add mixer2;#X add mixer3;#X prefix_set 0 0 <none> 0;#P button 10 25 15 0;#P user ubumenu 25 108 60 196617 0 1 1 0;#X add pass;#X add *;#X add /;#X add +;#X add -;#X add +m;#X add -m;#X add %;#X add min;#X add max;#X add abs;#X add avg;#X add absdiff;#X add wrap;#X add fold;#X add !pass;#X add !/;#X add !-;#X add !%;#X add &;#X add |;#X add ^;#X add ~;#X add >>;#X add <<;#X add &&;#X add ||;#X add !;#X add >;#X add <;#X add >=;#X add <=;#X add ==;#X add !=;#X add >p;#X add <p;#X add >=p;#X add <=p;#X add ==p;#X add !=p;#X add sin;#X add cos;#X add tan;#X add asin;#X add acos;#X add atan;#X add atan2;#X add sinh;#X add cosh;#X add tanh;#X add asinh;#X add acosh;#X add atanh;#X add exp;#X add exp2;#X add ln;#X add log2;#X add log10;#X add hypot;#X add pow;#X add sqrt;#X add ceil;#X add floor;#X add round;#X add trunc;#X add ignore;#X prefix_set 0 0 <none> 0;#P newex 50 129 72 196617 prepend op;#P newex 10 231 214 196617 jit.buffer~ mixer3 1000 @outputlength 1000;#P message 239 68 30 196617 read;#P message 50 65 30 196617 read;#P newex 10 160 225 196617 jit.op;#P newex 225 88 214 196617 jit.buffer~ mixer2 1000 @outputlength 1000;#P message 10 65 38 196617 output;#P flonum 454 138 35 9 0 0 0 3 0 0 0 221 221 221 222 222 222 0 0 0;#P user gain~ 455 207 68 67 158 0 1.071519 7.94321 10.;#P newex 454 161 40 196617 sync~;#P newex 454 186 115 196617 wave~ mixer3 0 1000.;#P user ezdac~ 455 306 499 339 0;#P newex 10 88 214 196617 jit.buffer~ mixer1 1000 @outputlength 1000;#P window linecount 2;#P comment 27 25 101 196617 Trigger to combine 2 buffers;#P window linecount 8;#P comment 230 234 221 196617 This patch demonstrates the use of a jit.buffer~ to apply instantaneous operations on an entire buffer. This is especially useful for applying transformations to a sample without utilizing signal processing. With a little ingenuity \, you could set up a multitude of non-realtime and recursive transformations by running matrix operations on your buffer.;#P window setfont "Sans Serif" 24.;#P window linecount 1;#P comment 447 87 136 196632 BufferOps;#P connect 17 0 9 0;#P connect 9 0 3 0;#P fasten 12 0 3 0 55 85 15 85;#P connect 3 0 11 0;#P fasten 15 0 11 0 55 153 15 153;#P fasten 20 0 14 0 15 328 227 328 227 226 15 226;#P fasten 27 0 14 0 46 222 15 222;#P fasten 24 0 14 0 261 227 15 227;#P connect 11 0 14 0;#P connect 14 0 20 0;#P fasten 21 0 20 0 55 302 15 302;#P connect 16 1 15 0;#P connect 22 1 21 0;#P connect 23 0 20 1;#P fasten 9 0 10 0 15 85 230 85;#P fasten 13 0 10 0 244 85 230 85;#P connect 10 0 11 1;#P connect 25 0 24 0;#P connect 8 0 6 0;#P fasten 19 0 5 0 520 183 459 183;#P connect 6 0 5 0;#P connect 5 0 7 0;#P connect 7 0 4 0;#P connect 7 0 4 1;#P connect 18 1 19 0;#P pop;